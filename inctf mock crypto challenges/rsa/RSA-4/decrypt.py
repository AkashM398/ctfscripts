from Crypto.Util.number import *
g =  6880708450599371130881015483507826787473680076823032569270417667717239477090820870542986324502779942815310635179294993534188765837026026390548488142312212778954030220677093623791371078157360453483981512843719171331554460155977915006608156022020450468408330529492298718541370734011260051065358100350831838803
N = 78347218359895112612527330392462838816685153926438234460008564879287934099740525171692837588691652824330258439850835089613960568963729557421351504589670237070498380878328173598628479673760759245426776808027259806838308532577200376687171827063088040812176470947724945757880997247708996006312216810169142797863
Encrypted_Data = 16389401117251075297995112721288884891427295181952450595701002663667192996932682015896022526169421704102714533162134041936514247614198617730247790828213562511801336673977863955134695049549225825170771154429881847368300656071219059565707769069174490135886501786543393522862759584817392921012276379419850364580

e = 65537

# Using Euler's Theorem and Fermat's Little Theorem we have
kp=(pow(2,3735928559)*g)-2
p = GCD(kp,N) 

assert N % p == 0
q = N / p


phin = (p-1)*(q-1)
d = inverse(e, phin)
m = pow(Encrypted_Data, d, N)
print long_to_bytes(m)

