from Crypto.Util.number import *

import gmpy2


p = 6958271393287170117448891021448827870244652620796166337874899406278127643022124226656230972235829204217718701711355755622520840943962368410353060326959627
q = 10816988558466468069802205154113557859050665172995721741674476865844313409030354507360669179381457836401919224815040955096510785560864262908230559354811907
e = 65537
c = 10626995461229291840988848739856549950759742995569449618301942263409489663664076282188883718369550472747640751159068205711394337814755036377493720378756757576694834155677852315604426114598076009996976101021691356371991518974426333878423159949773442282609526677144926382131388815922985034657787207533067845012

t = (p-1)*(q-1)
n = p*q

# returns d value such that e * d == 1 modulo t, or 0 if no such y exists.
d = gmpy2.invert(e,t)

# Decryption
decimalmessage = pow(c,d,n)
print(long_to_bytes(decimalmessage))




